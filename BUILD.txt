Currently just running compile/build commands with gcc.
//// First make output directories if they don't already exist
mkdir bin
mkdir obj

//// next build shared lib and main executable
cd src/lib

// compile shared library source to object file
gcc -c -Wall -Werror -fPIC RomNumMath.c -o ../../obj/RomNumMath.o

// build shared library from object file
gcc -shared -o ../../bin/libRomNumMath.so ../../obj/RomNumMath.o

// moe to app directory
cd ../app

// compile and link app with shared library
gcc -L../../bin -Wall -Werror RomNumCalcApp.c -o ../../bin/RomNumCalcApp -lRomNumMath

// run executable from command line
LD_LIBRARY_PATH=../../bin ../../bin/RomNumCalcApp

//// Next build test executable
cd ../tests

// compile and link test executable with shared library
gcc -L../../bin -Wall -Werror TestRomNumCalc.c -o ../../bin/TestRomNumCalc -lRomNumMath

// run text executable from command line
LD_LIBRARY_PATH=../../bin ../../bin/TestRomNumCalc

// ------------ New Autoconf directives
// run autoscan
autoscan

// Compare old configure.ac and configure.scan.
// Save any differences you like into a new configure.ac

// Run autoreconf to create Makefile.in
autoreconf --install

// Add a build directory if you like
mkdir build

// Run configure to get new Makefile
./configure (or cd build and run ../configure)

// Run make to build the binaries
make

// Run unit tests
make check

